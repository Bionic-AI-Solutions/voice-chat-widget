version: '3.8'

# =============================================================================
# PRODUCTION DOCKER COMPOSE CONFIGURATION
# =============================================================================
# Production-ready deployment configuration

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  # Redis for task queues and caching
  redis:
    image: redis:7-alpine
    container_name: voice-chat-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - voice-chat-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # MinIO for audio file storage
  minio:
    image: minio/minio:latest
    container_name: voice-chat-minio-prod
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_prod_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_DEFAULT_BUCKETS: voice-recordings,reports,temp-files
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    networks:
      - voice-chat-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  # Voice Chat Widget (Production)
  voice-chat-widget:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
      target: production
    container_name: voice-chat-widget-prod
    ports:
      - "80:80"
      - "3001:3001"
    environment:
      NODE_ENV: production
      APP_PORT: 3001
      APP_HOST: 0.0.0.0
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_USE_SSL: false
      LOG_LEVEL: info
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SPEECHMATICS_API_KEY: ${SPEECHMATICS_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ENABLE_ADMIN: ${ENABLE_ADMIN:-true}
    volumes:
      - widget_logs:/app/logs
      - widget_audio:/app/audio
      - widget_reports:/app/reports
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - voice-chat-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Worker Processes (Production)
  workers:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: voice-chat-workers-prod
    environment:
      NODE_ENV: production
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_USE_SSL: false
      LOG_LEVEL: info
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SPEECHMATICS_API_KEY: ${SPEECHMATICS_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-5}
      WORKER_POOL_SIZE: ${WORKER_POOL_SIZE:-3}
    volumes:
      - worker_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - voice-chat-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # =============================================================================
  # MONITORING AND LOGGING
  # =============================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: voice-chat-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - voice-chat-prod-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: voice-chat-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - voice-chat-prod-network
    restart: unless-stopped
    profiles:
      - monitoring

  # =============================================================================
  # BACKUP AND MAINTENANCE
  # =============================================================================

  # Backup service
  backup:
    image: alpine:latest
    container_name: voice-chat-backup
    volumes:
      - minio_prod_data:/data/minio:ro
      - redis_prod_data:/data/redis:ro
      - backup_data:/backup
    environment:
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      MINIO_ENDPOINT: minio
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
    command: |
      sh -c '
        apk add --no-cache dcron rsync &&
        echo "$$BACKUP_SCHEDULE /backup/backup.sh" | crontab - &&
        crond -f
      '
    networks:
      - voice-chat-prod-network
    restart: unless-stopped
    profiles:
      - backup

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  # Data persistence
  redis_prod_data:
    driver: local
  minio_prod_data:
    driver: local
  
  # Application data
  widget_logs:
    driver: local
  widget_audio:
    driver: local
  widget_reports:
    driver: local
  worker_logs:
    driver: local
  
  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Backup data
  backup_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  voice-chat-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
