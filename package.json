{
    "name": "voice-chat-widget",
    "version": "1.0.0",
    "description": "Embeddable React voice chat bot widget with distributed worker architecture and comprehensive admin dashboard",
    "main": "index.js",
    "scripts": {
        "dev": "concurrently \"npm run dev:server\" \"npm run dev:widget\" \"npm run dev:admin\" \"npm run dev:workers\"",
        "dev:server": "cd server && npm run dev",
        "dev:widget": "cd src && npm run dev",
        "dev:admin": "cd admin && npm run dev",
        "dev:workers": "cd workers && npm run dev",
        "build": "npm run build:widget && npm run build:admin && npm run build:server",
        "build:widget": "cd src && npm run build",
        "build:admin": "cd admin && npm run build",
        "build:server": "cd server && npm run build",
        "test": "npm run test:unit && npm run test:integration",
        "test:unit": "jest --testPathPattern=tests/unit",
        "test:integration": "jest --testPathPattern=tests/integration",
        "test:e2e": "playwright test",
        "lint": "eslint . --ext .ts,.tsx,.js,.jsx",
        "lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix",
        "format": "prettier --write .",
        "type-check": "tsc --noEmit",
        "setup": "npm run setup:supabase && npm run setup:env",
        "setup:supabase": "supabase start",
        "setup:env": "cp env.example .env",
        "migrate": "supabase migration up",
        "deploy": "npm run build && npm run deploy:supabase",
        "deploy:supabase": "supabase functions deploy",
        "docker:up": "docker-compose up -d",
        "docker:down": "docker-compose down",
        "docker:logs": "docker-compose logs -f",
        "clean": "rm -rf node_modules dist build .next",
        "clean:all": "npm run clean && find . -name node_modules -type d -exec rm -rf {} +",
        "start": "npm run start:server",
        "start:server": "cd server && npm start",
        "start:workers": "cd workers && npm start"
    },
    "keywords": [
        "voice-chat",
        "widget",
        "react",
        "webrtc",
        "speechmatics",
        "openai",
        "supabase",
        "redis",
        "minio",
        "admin-dashboard"
    ],
    "author": "Bionic-AI-Solutions",
    "license": "MIT",
    "repository": {
        "type": "git",
        "url": "https://github.com/Bionic-AI-Solutions/voice-chat-widget.git"
    },
    "bugs": {
        "url": "https://github.com/Bionic-AI-Solutions/voice-chat-widget/issues"
    },
    "homepage": "https://github.com/Bionic-AI-Solutions/voice-chat-widget#readme",
    "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
    },
    "devDependencies": {
        "@types/jest": "^29.5.8",
        "@types/node": "^20.9.0",
        "@typescript-eslint/eslint-plugin": "^6.12.0",
        "@typescript-eslint/parser": "^6.12.0",
        "concurrently": "^8.2.2",
        "eslint": "^8.54.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-plugin-prettier": "^5.0.1",
        "eslint-plugin-react": "^7.33.2",
        "eslint-plugin-react-hooks": "^4.6.0",
        "jest": "^29.7.0",
        "prettier": "^3.1.0",
        "typescript": "^5.2.2"
    },
    "workspaces": [
        "src",
        "admin",
        "server",
        "workers"
    ],
    "jest": {
        "preset": "ts-jest",
        "testEnvironment": "node",
        "roots": [
            "<rootDir>/tests"
        ],
        "testMatch": [
            "**/__tests__/**/*.ts",
            "**/?(*.)+(spec|test).ts"
        ],
        "collectCoverageFrom": [
            "src/**/*.{ts,tsx}",
            "server/**/*.{ts,js}",
            "workers/**/*.{ts,js}",
            "!**/*.d.ts",
            "!**/node_modules/**"
        ],
        "coverageThreshold": {
            "global": {
                "branches": 80,
                "functions": 80,
                "lines": 80,
                "statements": 80
            }
        }
    },
    "eslintConfig": {
        "extends": [
            "eslint:recommended",
            "@typescript-eslint/recommended",
            "prettier"
        ],
        "parser": "@typescript-eslint/parser",
        "plugins": [
            "@typescript-eslint",
            "prettier"
        ],
        "rules": {
            "prettier/prettier": "error",
            "@typescript-eslint/no-unused-vars": "error",
            "@typescript-eslint/explicit-function-return-type": "warn",
            "@typescript-eslint/no-explicit-any": "warn"
        },
        "env": {
            "browser": true,
            "es2021": true,
            "node": true
        }
    },
    "prettier": {
        "semi": true,
        "trailingComma": "es5",
        "singleQuote": true,
        "printWidth": 100,
        "tabWidth": 2
    }
}